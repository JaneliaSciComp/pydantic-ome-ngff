[tool.poetry]
name = "pydantic-ome-ngff"
version = "0.4.0"
description = "Pydantic models for the OME-NGFF"
authors = ["Davis Vann Bennett <davis.v.bennett@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "pydantic_ome_ngff", from="src"}]

[tool.poetry.dependencies]
python = "^3.9"
pydantic-zarr = "0.7.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.0.4"
isort = "^5.12.0"
jsonschema = "^4.17.3"
pytest = "^7.2.1"
mypy = "^1.0.1"
requests = "^2.28.2"
pytest-cov = "^4.0.0"
fsspec = {version = "^2024.2.0", extras=["http"]}


[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.5.5"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
pytest-examples = "^0.0.9"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
plugins = [
  "pydantic.mypy"
]

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[tool.coverage.run]
source = ['src']
branch = true
context = '${CONTEXT}'

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
]

[tool.coverage.paths]
source = [
    'src/'
]

[tool.coverage.html]
directory = "htmlcov"
